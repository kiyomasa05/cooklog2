apiのフックスのテスト方法が不明なので一旦保留

import React from 'react'
import { render, screen, cleanup } from "@testing-library/react"
import { act, renderHook } from "@testing-library/react-hooks";
import userEvent from "@testing-library/user-event";

import { createMemoryHistory } from 'history'
import { Router } from 'react-router-dom';

import { rest } from "msw";
import { setupServer } from "msw/node";
import { useAuth } from '../hooks/useAuth';

const server = setupServer(
  rest.post("http://localhost:3000/api/v1/login", (req, res, ctx) => {
    return res(ctx.status(200), ctx.json(
      {
        logged_in: true,
        user: {
          user_id: 1
        }
      }
    ));
  })
);

beforeAll(() => server.listen());
afterEach(() => {
  server.resetHandlers();
  cleanup();
});
afterAll(() => server.close());

afterEach(() => cleanup());

describe("Check for fetch API", () => {
  it("[success]Should post data", async() => {
    const { result } = renderHook(() => useAuth());
    const data = {
      email:"m230@sample.com",
      password:"1234"
    }
    act(() => {
      result.current.login(data);
    });
    //apiへ（モックへ）接続される
    // await expect(screen.findByText("ログインしました")).toBeTruthy();
    await expect(screen.findByText("認証できませんでした。再度リロードなどを行いやり直して下さい")).toBeTruthy();
  })
  it("[failed]Should post data", async() => {
    const { result } = renderHook(() => useAuth());
    const data = {
      email:"m230@sample.com",
      password:"1234"
    }
    server.use(
      rest.post(
        "http://localhost:3000/api/v1/login",
        (req, res, ctx) => {
          return res(ctx.status(401), ctx.json(
            {
              errors:["正しい情報を入力してください"]
            })
          );
        }
      )
    );
    act(() => {
      result.current.login(data);
    });
    //apiへ（モックへ）接続される
    expect(await screen.findByText("正しい情報を入力してください")).toBeTruthy();
  })
})

 //apiへの送信テスト
//  describe("Check for fetch API", () => {
//   it("Should post data", async () => {
//     const history = createMemoryHistory();
//     render(
//       <Router history={history}>
//         <Login />
//       </Router>
//     )
//     const inputEmail = screen.getByPlaceholderText("email");
//     const inputPassword = screen.getByPlaceholderText("password");
//     userEvent.type(inputEmail, "m230549@gmail.com");
//     userEvent.type(inputPassword, "1234");
//     userEvent.click(screen.getByDisplayValue("ログイン"))
    
//     expect(screen.findByText("ログインしました")).toBeTruthy();
    // expect(history.length).toBe(2);
    // expect(history.location.pathname).toBe('/users/${response.data.user.id}');
//   })
  
// })
